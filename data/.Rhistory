a<-'hello'
print a
a
# Libraries Needed
library(caret)
library(glmnet)
library(mlbench)
install.packages("caret")
install.packages("glmnet")
install.packages("mlbench")
# Libraries Needed
library(caret)
library(glmnet)
library(mlbench)
library(psych)
# Data
data("BostonHousing")
data <- BostonHousing
data
str(data)
pairs.panels(data[c(-4,-14)], cex=2)
pairs.panels(data[c(-4,-14)], cex=2)
# Data Partition
set.seed(222)
ind <- sample(2, nrow(data), replace = T, prob = c(0.7, 0.3))
# Data Partition
set.seed(222)
ind <- sample(2, nrow(data), replace = T, prob = c(0.7, 0.3))
# Data Partition
set.seed(222)
ind <- sample(2, nrow(data), replace = T, prob = c(0.7, 0.3))
train <- data[ind==1,]
test <- data[ind==2,]
# Custom Control Parameters
custom <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5,
verboseIter = T)
# Linear Model
set.seed(1234)
lm <- train(medv ~ .,
train,
method = "lm",
trControl = custom)
# Results
lm$results
lm
summary(lm)
plot(lm$finalModel)
plot(lm$finalModel)
plot(lm$finalModel)
ridge <- train(medv ~.,
train,
method = "glmnet",
tuneGrid = expand.grid(alpha = 0,
lambda = seq(0.0001, 1, length = 5)),
trControl = custom)
# Plot Results
plot(ridge)
ridge
plot(varImp(ridge, scale=T))
plot(varImp(ridge, scale=F))
plot(varImp(ridge, scale=T))
lasso <- train(medv ~.,
train,
method ="glmnet",
tuneGrid = expand.grid(alpha = 1,
lambda = seq(0.0001, 1, lenght = 5)),
trControl = custom)
lasso <- train(medv ~.,
train,
method ="glmnet",
tuneGrid = expand.grid(alpha = 1,
lambda = seq(0.0001, 1, length = 5)),
trControl = custom)
# Plot Results
plot(lasso)
lasso
plot(lasso$finalModel, xvar = 'lambda', label=T)
plot(en$finalModel, xvar = 'dev', label=T)
plot(lasso$finalModel, xvar = 'dev', label=T)
plot(varImp(lasso))
en <- train(medv~.,
train,
method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,length=10),
lambda = seq(0.0001, 1, length = 5)),
trControl = custom)
# Plot Results
plot(en)
en <- train(medv~.,
train,
method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,length=10),
lambda = seq(0.0001, 0.2, length = 5)),
trControl = custom)
# Plot Results
plot(en)
plot(en$finalModel, xvar = 'lambda', label=T)
plot(en$finalModel, xvar = 'lambda', label=T)
plot(en$finalModel, xvar = 'dev', label=T)
plot(varImp(en))
# Compare Models
model_list <- list(LinearModel = lm, Ridge = ridge, Lasso = lasso, ElasticNet = en)
res <- resamples(model_list)
summary(res)
bwplot(res)
xyplot(res, metric = "RMSE")
# Best Model
en$bestTune
best <- en$finalModel
coef(best, s = en$bestTune$lambda)
fm<-en
print(fm)
# Prediction
p1 <- predict(fm, train)
sqrt(mean((train$medv-p1)^2))
sqrt(mean((train$medv)^2))
p2 <- predict(fm, test)
sqrt(mean((test$medv-p2)^2))
a<-seq(1:1000)
summary(a)
main_dir<-"~/Desktop/LUMC/Metabotypes/BBMRI/LLS_associations"
surro_list<-c("s_sex", "s_diabetes", "s_lipidmed", "s_metabolic_syndrome", "s_alcohol_consumption",
"s_age", "s_BMI", "s_hscrp", "s_diastolic_blood_pressure", "s_systolic_blood_pressure",
"s_hip_circumference", "s_waist_circumference")
apply.scale <- function(dat,MEAN,SD,quiet=FALSE){
if(!quiet){
cat("| Apply scaling ... ")
}
COLNAMES <- colnames(dat)
names(SD)<-COLNAMES
dat <- sapply(COLNAMES,function(x) (dat[,x]-MEAN[x])/SD[x])
if(!quiet){
cat("Done! \n")
}
return(dat)
}
LLS<-"LLS_SIBS"
################
#Load the files#
################
if(LLS=="LLS_PO"){
#LLS_PO biomarkers
LLS_pheno<-read.table(paste0(main_dir,"/Data/LLS_IOP1-Offs-Part-data/LLS_IOP1-OffsPart-measurements_20200116_v1.dat"),
header = T, sep = "\t",
check.names = F, stringsAsFactors=FALSE, colClasses="character")
LLS_pheno<-LLS_pheno[,-c(39:42)]
biomarkers<-colnames(LLS_pheno)[16:59]
#LLS_PO surrogates
LLS_surrogates<-read.table(paste0(main_dir,"/Data/Surrogates/LLS_PO_surrogates.csv"),
header = T, sep = ",",
check.names = F, stringsAsFactors=FALSE, colClasses="character")
LLS_surrogates<-LLS_surrogates[,-1]
}else{
#LLS_Sibs biomarkers
LLS_pheno<-read.table(paste0(main_dir,"/Data/LLS_Sibs-data/LLS_IOP1-Sibs-measurements_20200116_v1.dat"),
header = T, sep = "\t",
check.names = F, stringsAsFactors=FALSE, colClasses="character")
LLS_pheno<-LLS_pheno[,-c(43:62)]
biomarkers<-colnames(LLS_pheno)[16:43]
#LLS_SIBS surrogates
LLS_surrogates<-read.table(paste0(main_dir,"/Data/Surrogates/LLS_SIBS_surrogates.csv"),
header = T, sep = ",",
check.names = F, stringsAsFactors=FALSE, colClasses="character")
LLS_surrogates<-LLS_surrogates[,-1]
}
#################
#Arrange the IDs#
#################
colnames(LLS_surrogates)[-c(1:3)]<-surro_list
LL<-LLS_surrogates %>% extract(person_id, c('V1', 'LLnr'), regex = '(^.+)-(\\d+)')
LLS_surrogates<-data.frame(LLnr=as.numeric(LL$LLnr),LLS_surrogates)
rm(LL)
LLS_pheno<-data.frame(LLnr=as.numeric(gsub("[.]","",LLS_pheno$LLnr)),LLS_pheno)
main_dir<-"~/Desktop/LUMC/Metabotypes/BBMRI/LLS_associations"
surro_list<-c("s_sex", "s_diabetes", "s_lipidmed", "s_metabolic_syndrome", "s_alcohol_consumption",
"s_age", "s_BMI", "s_hscrp", "s_diastolic_blood_pressure", "s_systolic_blood_pressure",
"s_hip_circumference", "s_waist_circumference")
apply.scale <- function(dat,MEAN,SD,quiet=FALSE){
if(!quiet){
cat("| Apply scaling ... ")
}
COLNAMES <- colnames(dat)
names(SD)<-COLNAMES
dat <- sapply(COLNAMES,function(x) (dat[,x]-MEAN[x])/SD[x])
if(!quiet){
cat("Done! \n")
}
return(dat)
}
LLS<-"LLS_SIBS"
################
#Load the files#
################
if(LLS=="LLS_PO"){
#LLS_PO biomarkers
LLS_pheno<-read.table(paste0(main_dir,"/Data/LLS_IOP1-Offs-Part-data/LLS_IOP1-OffsPart-measurements_20200116_v1.dat"),
header = T, sep = "\t",
check.names = F, stringsAsFactors=FALSE, colClasses="character")
LLS_pheno<-LLS_pheno[,-c(39:42)]
biomarkers<-colnames(LLS_pheno)[16:59]
#LLS_PO surrogates
LLS_surrogates<-read.table(paste0(main_dir,"/Data/Surrogates/LLS_PO_surrogates.csv"),
header = T, sep = ",",
check.names = F, stringsAsFactors=FALSE, colClasses="character")
LLS_surrogates<-LLS_surrogates[,-1]
}else{
#LLS_Sibs biomarkers
LLS_pheno<-read.table(paste0(main_dir,"/Data/LLS_Sibs-data/LLS_IOP1-Sibs-measurements_20200116_v1.dat"),
header = T, sep = "\t",
check.names = F, stringsAsFactors=FALSE, colClasses="character")
LLS_pheno<-LLS_pheno[,-c(43:62)]
biomarkers<-colnames(LLS_pheno)[16:43]
#LLS_SIBS surrogates
LLS_surrogates<-read.table(paste0(main_dir,"/Data/Surrogates/LLS_SIBS_surrogates.csv"),
header = T, sep = ",",
check.names = F, stringsAsFactors=FALSE, colClasses="character")
LLS_surrogates<-LLS_surrogates[,-1]
}
#################
#Arrange the IDs#
#################
colnames(LLS_surrogates)[-c(1:3)]<-surro_list
LL<-LLS_surrogates %>% extract(person_id, c('V1', 'LLnr'), regex = '(^.+)-(\\d+)')
suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(matrixStats)
library(foreach)
library(pheatmap)
library(psych)
library(survival)
})
#################
#Arrange the IDs#
#################
colnames(LLS_surrogates)[-c(1:3)]<-surro_list
LL<-LLS_surrogates %>% extract(person_id, c('V1', 'LLnr'), regex = '(^.+)-(\\d+)')
LLS_surrogates<-data.frame(LLnr=as.numeric(LL$LLnr),LLS_surrogates)
rm(LL)
LLS_pheno<-data.frame(LLnr=as.numeric(gsub("[.]","",LLS_pheno$LLnr)),LLS_pheno)
#Find the matching IDs
ind<-which(LLS_surrogates$LLnr %in% LLS_pheno$LLnr)
#missing matches
LLS_missing<-LLS_surrogates[setdiff(1:dim(LLS_surrogates)[1],ind),]
#LLS surrogates recovered
LLS_surrogates<-LLS_surrogates[ind,]
ind<-which(LLS_pheno$LLnr %in% LLS_surrogates$LLnr)
LLS_pheno<-LLS_pheno[ind,]
LLS_pheno<-LLS_pheno[order(LLS_pheno$LLnr),]
LLS_surrogates<-LLS_surrogates[order(LLS_surrogates$LLnr),]
#Transform to a numeric matrix and merge
LLS_surrogates<-data.matrix(LLS_surrogates[,-c(2:4)])
LLS_phenotypes<-data.matrix(cbind(LLnr=LLS_pheno$LLnr,LLS_pheno[,biomarkers]))
data <- merge(LLS_phenotypes,LLS_surrogates,by="LLnr")
p_assoc<-foreach(y=surro_list, .combine='cbind') %do%{
p_assoc<-foreach(x=biomarkers, .combine='rbind') %do%{
coefficients(summary(lm(as.formula(paste0(y,"~",x)),data)))[x,4]
}
rownames(p_assoc)<-biomarkers
return(p_assoc)
}
colnames(p_assoc)<-surro_list
###########
# Heatmap #
###########
a<-matrix(1, nrow = dim(p_assoc)[1], ncol = dim(p_assoc)[2])
IND <- which(p_assoc<=0.05/length(biomarkers),arr.ind=TRUE)
a[IND]<-0
colnames(a)<-colnames(p_assoc)
rownames(a)<-rownames(p_assoc)
pheatmap(a,scale = "none",
cluster_rows = F, cluster_cols = F,
show_rownames=1, show_colnames=1, legend=F, legend_labels = c("pvalues\n"),
labels_col=as.character(colnames(a)),
main=paste("P-values of the associations with traits",LLS),
display_numbers= signif(p_assoc, digits = 2), fontsize_number = 11.5, fontsize_row=10, fontsize_col=10,
c(colorRampPalette(colors = c("green","red"))(n = 2)))
dev.off()
library(survival)
data<-cbind(LLS_pheno[,c("Age_IOP1","Age_censoring2017","Dead2017")],data)
data<-as.data.frame(data.matrix(data))
data <- data[which(!is.na(data$Age_IOP1)),]
data <- data[which(!is.na(data$Age_censoring2017)),]
data <- data[which(!is.na(data$Dead2017)),]
data$Dead2017<-as.factor(data$Dead2017)
survObject <- Surv(time =  data$Age_IOP1, time2 = data$Age_censoring2017, event=data$Dead2017)
res <- sapply(c(biomarkers,surro_list),function(x) coxph(as.formula(paste0("survObject~Age_IOP1+",x)),data, ties="breslow"),simplify=FALSE)
View(data)
table.cox <- function(LofR,main=NULL){
res <- t(sapply(1:length(LofR),function(x){
data.frame(cbind(coefficients(summary(LofR[[x]]))[names(LofR)[x],,drop=FALSE],
exp(confint(LofR[[x]]))[names(LofR)[x],,drop=FALSE]),Ntotal=summary(LofR[[x]])$n,stringsAsFactors=TRUE)
}))
res <- data.frame(res,stringsAsFactors=FALSE)
res <- res[,c("exp.coef.","X2.5..","X97.5..","Pr...z..","Ntotal")]
colnames(res) <- c("HR","upper","lower","p","Ntotal")
IND <- which(res<=0.05,arr.ind=TRUE)
IND <- IND[which(IND[,"col"]==4),,drop=FALSE]
res$HR <- format(res$HR,digits=3,nsmall=3)
res$upper <- format(res$upper,digits=3,nsmall=3)
res$lower <- format(res$lower,digits=3,nsmall=3)
res$p[which(res$p<0.01)] <- format(res$p[which(res$p<0.01)],scientific=TRUE,digits=3,nsmall=3)
res$p[which(res$p>=0.01)] <- format(res$p[which(res$p>=0.01)],scientific=FALSE,digits=3,nsmall=3)
res$p <- format(res$p, scientific=TRUE,digits=3)
rownames(res) <- names(LofR)
pander:::pander(res,justify = c('left',rep('right',(ncol(res)))),caption = main,split.cells = rep(10,ncol(res)+1),emphasize.strong.cells=IND,keep.trailing.zeros = TRUE)
}
table.cox(res,main="Associations with mortality adjusted for age and gender")
#survObject <- Surv(time =  AGE$age, time2 = AGE$age_censored,event=AGE$death)
#summary(coxph(survObject~age+sex+delta_age+ADL+IADL+cantril+transf_MMSE+ln_fT3+ln_fT4+HZ+IGF1_IGFBP3_ratio+ln_hsCRP+ln_FFA+ln_NTG_bc+HDLP_bc+cluster(fam),AGE, ties="breslow"))
summary(coxph(survObject~s_sex+s_diabetes+s_lipidmed+s_metabolic_syndrome+s_alcohol_consumption+s_age+s_BMI+s_hscrp+s_diastolic_blood_pressure+s_systolic_blood_pressure+s_hip_circumference+s_waist_circumference
,data, ties="breslow"))
summary(coxph(survObject~s_sex+s_diabetes+s_lipidmed+s_metabolic_syndrome+s_age+s_hscrp+s_diastolic_blood_pressure+s_waist_circumference
,data, ties="breslow"))
fit.coxph<-coxph(survObject~s_sex+s_diabetes+s_lipidmed+s_metabolic_syndrome+s_alcohol_consumption+s_age+s_BMI+s_hscrp+s_diastolic_blood_pressure+s_systolic_blood_pressure+s_hip_circumference+s_waist_circumference
,data, ties="breslow")
ggforest(fit.coxph, data = data)
753+738+721+2632
library(BBMRIomics)
install.packages("BBMRIomics")
library(devtools)
install_github("bbmri-nl/BBMRIomics", subdir="BBMRIomics")\
install_github("bbmri-nl/BBMRIomics", subdir="BBMRIomics")
devtools::install_github("kassambara/survminer")
livrary(survminer)
library(survminer)
library(factoextra)
library(ggplot2)
library(mixOmics)
install.packages("igraph")
install.packages("igraph")
library(igraph)
2019-444
9-12
13-17
42/7.2
(20000*0.2)/100
(20000)/100
200/5
(20000*1.45)/100
(20000*1.21)/100
(20000*2.7)/100
(5000*2.7)/100
install.packages("rMIDAS")
library(rMIDAS)
version
0.05/40
shiny::runApp('Desktop/LUMC/Metabotypes/app/metabo_predictors_app/app')
runApp('Desktop/LUMC/Metabotypes/app/metabo_predictors_app/app')
131/7
80/7
setwd("~/Desktop/LUMC/Courses/FOS_to_teach/gwas_introduction/data")
results<-read.table(gzfile('~/Desktop/LUMC/Courses/FOS_to_teach/gwas_introduction/data")/LLS_PO.Betaine.ALL.MetaScore.assoc.chr5chr6.20211027.txt.gz'), header=TRUE,stringsAsFactors=F)
results<-read.table(gzfile('~/Desktop/LUMC/Courses/FOS_to_teach/gwas_introduction/data/LLS_PO.Betaine.ALL.MetaScore.assoc.chr5chr6.20211027.txt.gz'), header=TRUE,stringsAsFactors=F)
View(results)
head(results)
